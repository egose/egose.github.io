{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Egose","text":"<p><code>Egose</code> is a collection of toolkits that exposes REST API endpoints corresponding to mongoose data models in Express routes.</p>"},{"location":"#egose-acl","title":"Egose ACL","text":"<p><code>@egose/acl</code> is a package that provides REST API endpoints for <code>mongoose</code> data models in <code>Express</code> routes. It helps to secure the backend database by decorating mongoose queries with access control lists (ACLs), which are used to restrict access to sensitive data. The package also supports dynamic frontend mongoose-like query options, which allows developers to easily manipulate and query data from the frontend using familiar syntax. By using <code>@egose/acl</code>, developers can streamline their development process and reduce the risk of security breaches caused by unauthorized database access.</p> <ul> <li>see more details on Egose ACL</li> </ul>"},{"location":"#egose-deco","title":"Egose Deco","text":"<p>The <code>@egose/deco</code> package offers <code>TypeScript Decorators</code> that allow developers to define <code>@egose/acl</code> configurations and options through class and method <code>annotations</code>. By leveraging these decorators, developers can significantly enhance the readability and maintainability of their backend codebase. Overall, @egose/deco provides a powerful way to streamline authorization logic and improve code organization.</p> <ul> <li>see more details on Egose Deco</li> </ul>"},{"location":"egose-acl/philosophy/","title":"Philosophy","text":"<p><code>@egose/acl</code> is a package that provides REST API endpoints for <code>mongoose</code> data models in <code>Express</code> routes. It helps to secure the backend database by decorating mongoose queries with access control lists (ACLs), which are used to restrict access to sensitive data. The package also supports dynamic frontend mongoose-like query options, which allows developers to easily manipulate and query data from the frontend using familiar syntax. By using <code>@egose/acl</code>, developers can streamline their development process and reduce the risk of security breaches caused by unauthorized database access.</p> <p> </p>"},{"location":"egose-acl/philosophy/#motivation","title":"Motivation","text":"<p>RESTful APIs are widely used today, but they come with some disadvantages. One major challenge is managing object data at a fine-grained level. Consider the example of a User model with multiple fields, including <code>name</code>, <code>address</code>, <code>roles</code>, <code>creditBalance</code>, and <code>loginDate</code>. When retrieving or updating user entities using RESTful API endpoints, it can be difficult to control which fields are visible or editable depending on the requester's roles.</p> <p>For instance, let's say we have an <code>admin</code> role that is allowed to read and update all fields of a user entity, while a <code>non-admin</code> role is only allowed to read a subset of fields. Excluding fields that <code>non-admin</code> is not allowed to read might not be enough, as some fields could be redundant for certain screens. Moreover, sending additional information to the API call, such as <code>include=partial[|all]</code>, could lead to a messy backend codebase as the number of fields and screens grows.</p> <p>The problem becomes even more complex when it comes to updating user entities. Depending on the requester's role, different fields might be editable, and the logic for preventing unwanted updates can quickly become convoluted. This can result in multiple conditional statements in the backend codebase, making it difficult to maintain and scale.</p> <p>To address these challenges, it's worth considering alternative API protocols or standards that might provide more fine-grained control over object data. In addition, it's important to adopt a consistent approach to data management that takes into account the specific needs of different roles and screens. By doing so, it's possible to build more secure and efficient RESTful APIs that can support a wide range of use cases.</p>"},{"location":"egose-acl/philosophy/#concept","title":"Concept","text":"<p>The concept behind this approach is to define a security boundary, in the form of a schema, for each resource that can be accessed via backend routes. By wrapping the request information sent by the browser, this security layer provides the frontend codebase with the flexibility to build queries and manage data within the API endpoints.</p> <p>The library supports object permissions that define whether a user has the ability to perform a specific action on a single object. These permissions are also known as row-level permissions.</p> <ul> <li> <p>Global Permissions</p> <p>Global permissions are system-wide and are granted to authenticated users based on their roles. They enable <code>role-based access control (RBAC)</code> to the backend system. Global permissions are expected to be provided in the <code>Express request object</code> (e.g., <code>req._permissions</code>) and are used to enforce access control to the system and resources.</p> </li> <li> <p>Document Permissions</p> <p>Document permissions are object-level privileges that define the specific actions that can be performed on a single <code>Mongoose document</code>.</p> </li> <li> <p>Role-based Security</p> </li> <li> <p>Document-level Security</p> </li> <li> <p>Field-level security</p> </li> <li> <p>Base Filter</p> <p>Base filters are generated to decorate the <code>Mongoose Query object</code> and apply global permissions to a target collection.</p> </li> <li> <p>Mongoose Query Syntax</p> <p>The library API endpoints have a similar request structure to the <code>Mongoose Syntax</code>, which includes filter, select, and populate options. This helps reduce the learning curve of using the tool.</p> </li> </ul>"},{"location":"egose-acl/quick-start/","title":"Quick Start","text":"<p>Before proceeding, make sure to install <code>express</code> and <code>mongoose</code> as peer dependencies. These packages are required for the proper functioning of the application and must be installed prior to running the code. You can install them using the npm package manager.</p>"},{"location":"egose-acl/quick-start/#installation","title":"Installation","text":"<pre><code>npm install express mongoose @egose/deco\nnpm install @types/express --save-dev\n</code></pre> <pre><code>yarn add express mongoose @egose/deco\nyarn add @types/express --dev\n</code></pre>"},{"location":"egose-acl/quick-start/#backend-configuration","title":"Backend Configuration","text":""},{"location":"egose-acl/quick-start/#mongoose-models","title":"Mongoose Models","text":"<p>The creation and retrieval of documents from the MongoDB database are handled by the <code>mongoose models</code>. In turn, <code>@egose/acl</code> relies on obtaining model details from these mongoose model objects.</p> <pre><code>import mongoose from 'mongoose';\nconst UserSchema = new mongoose.Schema({\nname: { type: String, required: true },\nrole: { type: String, enum: ['admin', 'user'] },\npublic: { type: Boolean, default: false },\n});\nexport default mongoose.model('User', UserSchema);\n</code></pre>"},{"location":"egose-acl/quick-start/#global-permissions","title":"Global Permissions","text":"<p><code>Role-based access control (RBAC)</code> for the backend API endpoints relies on <code>Global Permissions</code> as a foundational component. These permissions are utilized to ascertain the requester's access level for each request.</p> <pre><code>import egose from '@egose/acl';\negose.set('globalPermissions', function (req) {\nconst user = req.user;\nif (!user) return { isGuest: true };\nreturn {\nisGuest: false,\nisUser: true,\nisAdmin: user.role === 'admin',\n};\n});\n</code></pre> <p>Upon execution, the global permission object will be assigned to the Express request object with the field name <code>_permissions</code>. To modify the name of the permission field, the <code>permissionField</code> global option can be adjusted as shown below:</p> <pre><code>egose.set('permissionField', 'mypermissions');\n</code></pre>"},{"location":"egose-acl/quick-start/#model-router","title":"Model Router","text":"<p>To generate predefined Express routes that bind to a Mongoose model, a model router can be established as follows:</p> <pre><code>const userRouter = egose.createRouter('User', { basePath: '/users' });\n</code></pre> <p>The first argument provided must match a previously established Mongoose model name.</p>"},{"location":"egose-acl/quick-start/#route-guard","title":"Route Guard","text":"<p>The Route Guard function implements <code>role-based security</code> and restricts access to the backend API endpoints based on global permissions. It permits only the defined routes, which include <code>Create</code>, <code>Read</code>, <code>Update</code>, <code>Delete</code>, and <code>List</code> (CRUDL), and excludes any omitted routes. There are several methods to validate access:</p> <ul> <li><code>boolean</code>: <code>true</code> or <code>false</code></li> <li><code>string</code>: considered valid if the key returns <code>true</code> in the global permissions</li> <li><code>array</code>: considered valid if any of the keys return <code>true</code> in the global permissions</li> <li><code>function</code>: considered valid if the function returns <code>true</code></li> </ul> <pre><code>userRouter.routeGuard({\n// the `list` route is available for any requesters including guests\nlist: true,\n// the `read` route is available for requesters whose global permissions includes `isAdmin` or `isUser`\nread: ['isAdmin', 'isUser'],\n// the `update` route is available for requesters whose global permissions includes `isAdmin`\nupdate: 'isAdmin',\n// the `update` route is available for requesters whose global permissions includes `isAdmin`\ncreate: function (globalPermissions) {\n// `this` refers to Express request object\nif (globalPermissions.isAdmin) return true;\nreturn false;\n},\n// the `delete` route is not available for any requesters\ndelete: false,\n});\n</code></pre>"},{"location":"egose-acl/quick-start/#base-filter","title":"Base Filter","text":"<p>The <code>Base Filter</code> feature applies <code>document-level security</code> to control access to individual documents in a collection. It achieves this by decorating the Mongoose Query object to define the permission guardrails based on the global permissions.</p> <p>To implement Base Filter, you can use the <code>baseFilter</code> method on a model router, passing in an object with functions that define the filters for each CRUD operation like in the code snippet below:</p> <pre><code>userRouter.baseFilter({\n// the list operation allows all requests\nlist: function (globalPermissions) {\nreturn true;\n},\n// the read operation returns the document if the requester is an admin or if the document is public\nread: function (globalPermissions) {\nif (globalPermissions.isAdmin) return {};\nelse return { $or: [{ _id: this.user._id }, { public: true }] };\n},\n// the update operation allows updates only if the requester is an admin or the document belongs to the requester\nupdate: function (globalPermissions) {\nif (globalPermissions.isAdmin) return {};\nelse return { _id: this.user._id };\n},\n// the delete operation allows deletion only if the requester is an admin\ndelete: function (globalPermissions) {\nreturn globalPermissions.isAdmin;\n},\n});\n</code></pre> <p>Suppose a non-admin user tries to update the user with ID <code>123456</code> by providing the filter object <code>{ _id: '123456' }</code>. To fetch the document, the backend security boundary generates the following Mongoose filter object behind the scenes:</p> <pre><code>const filter = { $and: [{ _id: this.user._id }, { _id: '123456' }] };\nconst result = await mongoose.model('User').findOne(filter);\n</code></pre>"},{"location":"egose-acl/quick-start/#document-permissions","title":"Document Permissions","text":"<p><code>Document permissions</code> are essential for implementing <code>field-level security</code> and can be accessed through applicable middleware hooks. Additionally, document permissions can be retrieved in the frontend application and used to implement business logic in the user interface based on the user's permissions.</p> <pre><code>userRouter.docPermissions(function (docOrObject, globalPermissions) {\nconst isMe = String(docOrObject._id) === String(this.user._id);\nreturn {\n'edit.name': globalPermissions.isAdmin || isMe,\n'edit.role': globalPermissions.isAdmin,\n};\n});\n</code></pre>"},{"location":"egose-acl/quick-start/#permission-schema","title":"Permission Schema","text":"<p>The <code>Permission schema</code> maps global and optional document permissions to resources, allowing for fine-grained control. It provides <code>field-level security</code> to restrict access to individual fields in a document, while <code>Base Filter</code> provides <code>document-level security</code>. If no field-level security rule is defined for a field, by default, the field is protected for all actions (list, read, update, and create).</p> <pre><code>userRouter.permissionSchema({\nname: { list: true, read: true, update: 'edit.name', create: true },\nrole: {\nlist: ['isAdmin', 'isUser'],\nread: 'isAdmin',\nupdate: function (globalPermissions, docPermissions) {\n// `this` refers to Express request object\nif (docPermissions['edit.role']) return true;\nreturn false;\n},\ncreate: 'isAdmin',\n},\n});\n</code></pre> <p>Note that global permissions are available for all actions, and document permissions are available for <code>update</code> and <code>create</code> actions. For example, <code>edit.name</code> is a document permission generated by the router option <code>docPermissions</code>.</p>"},{"location":"egose-acl/quick-start/#binding-the-model-router-routes-to-the-express-router","title":"Binding the model router routes to the Express router","text":"<p>After configuring the model router, you can bind its routes to an Express router as shown below:</p> <pre><code>import express from 'express';\nconst app = express();\nconst router = express.Router();\n// create a model router for the User model\nconst userRouter = egose.createRouter('User', { basePath: '/users' });\n// bind the User model router routes to the Express router\nrouter.use('/', userRouter.routes);\napp.use('/api', router);\n</code></pre> <p>The above code will expose the following API endpoints:</p> <ul> <li><code>GET</code> /api/users</li> <li><code>POST</code> /api/users/__query</li> <li><code>POST</code> /api/users</li> <li><code>POST</code> /api/users/__mutation</li> <li><code>GET</code> /api/users/new</li> <li><code>GET</code> /api/users/:id</li> <li><code>POST</code> /api/users/__query/:id</li> <li><code>PUT</code> /api/users/:id</li> <li><code>PUT</code> /api/users/__mutation/:id</li> <li><code>DELETE</code> /api/users/:id</li> <li><code>GET</code> /api/users/distinct/:field</li> <li><code>POST</code> /api/users/distinct/:field</li> <li><code>GET</code> /api/users/count</li> <li><code>POST</code> /api/users/count</li> </ul> <p>These endpoints correspond to various CRUD operations for the User model, and also include routes for querying and manipulating data using Mongoose-like syntax.</p>"},{"location":"egose-acl/quick-start/#source-code","title":"Source Code","text":"<pre><code>import mongoose from 'mongoose';\nimport express from 'express';\nimport egose from '@egose/acl';\nconst app = express();\nconst router = express.Router();\nconst UserSchema = new mongoose.Schema({\nname: { type: String, required: true },\nrole: { type: String, enum: ['admin', 'user'] },\npublic: { type: Boolean, default: false },\n});\nmongoose.model('User', UserSchema);\negose.set('globalPermissions', function (req) {\nconst user = req.user;\nif (!user) return { isGuest: true };\nreturn {\nisGuest: false,\nisUser: true,\nisAdmin: user.role === 'admin',\n};\n});\nconst userRouter = egose.createRouter('User', { basePath: '/users' });\nuserRouter.routeGuard({\nlist: true,\nread: ['isAdmin', 'isUser'],\nupdate: 'isAdmin',\ncreate: function (globalPermissions) {\nif (globalPermissions.isAdmin) return true;\nreturn false;\n},\ndelete: false,\n});\nuserRouter.baseFilter({\nlist: function (globalPermissions) {\nreturn true;\n},\nread: function (globalPermissions) {\nif (globalPermissions.isAdmin) return {};\nelse return { $or: [{ _id: this.user._id }, { public: true }] };\n},\nupdate: function (globalPermissions) {\nif (globalPermissions.isAdmin) return {};\nelse return { _id: this.user._id };\n},\ndelete: function (globalPermissions) {\nreturn globalPermissions.isAdmin;\n},\n});\nuserRouter.docPermissions(function (docOrObject, globalPermissions) {\nconst isMe = String(docOrObject._id) === String(this.user._id);\nreturn {\n'edit.name': globalPermissions.isAdmin || isMe,\n'edit.role': globalPermissions.isAdmin,\n};\n});\nuserRouter.permissionSchema({\nname: { list: true, read: true, update: 'edit.name', create: true },\nrole: {\nlist: ['isAdmin', 'isUser'],\nread: 'isAdmin',\nupdate: function (globalPermissions, docPermissions) {\nif (docPermissions['edit.role']) return true;\nreturn false;\n},\ncreate: 'isAdmin',\n},\n});\nrouter.use('/', userRouter.routes);\napp.use('/api', router);\napp.listen(3000);\n</code></pre>"},{"location":"egose-acl/quick-start/#frontend-usage","title":"Frontend Usage","text":""},{"location":"egose-acl/quick-start/#querying-selected-user-list","title":"Querying selected user list","text":"<pre><code>const listQueryUrl = '/api/users/__query';\nconst data = {\nfilter: { role: 'user' },\nselect: ['name', 'role'],\nsort: '-name',\npopulate: [],\npage: 1,\nlimit: 2,\n};\nconst response = await fetch(listQueryUrl, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/quick-start/#querying-a-selected-user","title":"Querying a selected user","text":"<pre><code>const targetUserId = 8;\nconst readQueryUrl = `/api/users/__query/${targetUserId}`;\nconst data = {\nselect: ['name', 'role'],\npopulate: [],\noptions: { includePermissions: true, tryList: true },\n};\nconst response = await fetch(readQueryUrl, {\nmethod: 'POST',\nheaders: { 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/","title":"API Specifications for CRUD Operations","text":"<p>For each CRUD operation, there is a dedicated API specification that ensures secure and flexible usage for consumer clients:</p> <ul> <li>List</li> <li>Read</li> <li>Create</li> <li>Update</li> <li>Delete</li> <li>New</li> <li>Count</li> <li>Distinct</li> </ul>"},{"location":"egose-acl/api-endpoints/count/","title":"Count","text":""},{"location":"egose-acl/api-endpoints/count/#count-documents","title":"Count Documents","text":"<p>This entrypoint returns the count of documents that the requester is allowed to read.</p> <ul> <li><code>GET /{base_url}/count</code></li> </ul>"},{"location":"egose-acl/api-endpoints/count/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/count/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X GET \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/count\n</code></pre> <pre><code>const url = 'https://example.com/users/count';\nconst response = await fetch(url, {\nmethod: 'GET',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/count/#response","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>3\n</code></pre>"},{"location":"egose-acl/api-endpoints/count/#count-documents-advanced","title":"Count Documents - Advanced","text":"<p>This entrypoint returns the count of documents that would match a query for the collection.</p> <ul> <li><code>POST /{base_url}/count</code></li> </ul>"},{"location":"egose-acl/api-endpoints/count/#parameters","title":"Parameters","text":"Name Type In Description Default <code>filter</code> object body Mongoose <code>Filter</code> object <code>access</code> 'list' | 'read' body The access level list"},{"location":"egose-acl/api-endpoints/count/#example_1","title":"Example","text":""},{"location":"egose-acl/api-endpoints/count/#request_1","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X POST \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/count \\\n-d '{\n    \"filter\": {\n      \"name\": { \"$regex\": \"drew\", \"$options\": \"i\" }\n    },\n    \"access\": \"list\"\n  }'\n</code></pre> <pre><code>const data = {\nfilter: {\nname: { $regex: 'drew', $options: 'i' },\n},\naccess: 'list',\n};\nconst url = 'https://example.com/users/count';\nconst response = await fetch(url, {\nmethod: 'POST',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/count/#response_1","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>2\n</code></pre>"},{"location":"egose-acl/api-endpoints/create/","title":"Create","text":""},{"location":"egose-acl/api-endpoints/create/#create-resource","title":"Create Resource","text":"<p>This entrypoint creates a new resource.</p> <ul> <li><code>POST /{base_url}</code></li> </ul>"},{"location":"egose-acl/api-endpoints/create/#parameters","title":"Parameters","text":"Name Type In Description Default <code>include_permissions</code> boolean query Whether to include document permissions true"},{"location":"egose-acl/api-endpoints/create/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/create/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X POST \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users \\\n-d '{ \"name\": \"Jane\" }'\n</code></pre> <pre><code>const data = { name: 'Jane' };\nconst url = 'https://example.com/users';\nconst response = await fetch(url, {\nmethod: 'POST',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/create/#response","title":"response","text":"<pre><code>Status: 201\n</code></pre> <pre><code>{\n\"_id\": \"5d6ede6a0ba62570afcedd3b\",\n\"name\": \"Jane\",\n\"address\": null,\n\"roles\": [\"user\"],\n\"creditBalance\": 0,\n\"loginDate\": null\n}\n</code></pre>"},{"location":"egose-acl/api-endpoints/create/#create-resource-advanced","title":"Create Resource - Advanced","text":"<p>This entrypoint creates a new resource and returns selective data fields.</p> <ul> <li><code>POST /{base_url}/__mutation</code></li> <li>The suffix <code>__mutation</code> can be configured using a model option, as demonstrated below:   <pre><code>modelRouter.set('mutationPath', '_mutable_');\n</code></pre></li> </ul>"},{"location":"egose-acl/api-endpoints/create/#parameters_1","title":"Parameters","text":"Name Type In Description Default <code>include_permissions</code> boolean query Whether to include document permissions true <code>data</code> object body Document data to create <code>select</code> object | array&lt;string&gt; body Document fields to include or exclude after the creation <code>populate</code> array&lt;string&gt; | array&lt;object&gt; body Document fields to populate after the creation <code>options.includePermissions</code> boolean body Whether to include document permissions true <code>options.populateAccess</code> 'list' | 'read' body The access level to use in <code>populate</code> method read"},{"location":"egose-acl/api-endpoints/create/#example_1","title":"Example","text":""},{"location":"egose-acl/api-endpoints/create/#request_1","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X POST \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/__mutation \\\n-d '{\n    \"data\": { \"name\": \"Jane\" },\n    \"select\": [\"name\", \"address\"],\n    \"populate\": [\"address\"],\n    \"options\": {\n      \"includePermissions\": true,\n      \"populateAccess\": \"list\",\n    }\n  }'\n</code></pre> <pre><code>const data = {\ndata: { name: 'Jane' },\nselect: ['name', 'address'],\npopulate: ['address'],\noptions: {\nincludePermissions: true,\npopulateAccess: 'list',\n},\n};\nconst url = 'https://example.com/users/__mutation';\nconst response = await fetch(url, {\nmethod: 'POST',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/create/#response_1","title":"response","text":"<pre><code>Status: 201\n</code></pre> <pre><code>{\n\"_id\": \"5d6ede6a0ba62570afcedd3b\",\n\"name\": \"Andrew Jackso\",\n\"address\": {\n\"city\": \"Seattle\",\n\"country\": \"USA\"\n},\n\"_permissions\": {\n\"edit\": false\n}\n}\n</code></pre>"},{"location":"egose-acl/api-endpoints/delete/","title":"Delete","text":""},{"location":"egose-acl/api-endpoints/delete/#delete-resource","title":"Delete Resource","text":"<p>This entrypoint deletes a target resource.</p> <ul> <li><code>DELETE /{base_url}/:id</code></li> </ul>"},{"location":"egose-acl/api-endpoints/delete/#parameters","title":"Parameters","text":"Name Type In Description <code>id</code> string param Resource identifier; <code>required</code>"},{"location":"egose-acl/api-endpoints/delete/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/delete/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X DELETE \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/5d6ede6a0ba62570afcedd3b\n</code></pre> <pre><code>const targetId = '5d6ede6a0ba62570afcedd3b';\nconst url = 'https://example.com/users/' + targetId;\nconst response = await fetch(url, {\nmethod: 'DELETE',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/delete/#response","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>\"5d6ede6a0ba62570afcedd3b\"\n</code></pre>"},{"location":"egose-acl/api-endpoints/distinct/","title":"Distinct","text":""},{"location":"egose-acl/api-endpoints/distinct/#distinct-field-values","title":"Distinct Field Values","text":"<p>This entrypoint finds the distinct values for a specified field across a target collection and returns the results in an array.</p> <ul> <li><code>GET /{base_url}/distinct/:field</code></li> </ul>"},{"location":"egose-acl/api-endpoints/distinct/#parameters","title":"Parameters","text":"Name Type In Description <code>field</code> string param The field for which to return distinct values"},{"location":"egose-acl/api-endpoints/distinct/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/distinct/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X GET \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/distinct/name\n</code></pre> <pre><code>const targetField = 'name';\nconst url = 'https://example.com/users/distinct/' + targetField;\nconst response = await fetch(url, {\nmethod: 'GET',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/distinct/#response","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>[\"Andrew\", \"Andrew-2nd\", \"Mike\"]\n</code></pre>"},{"location":"egose-acl/api-endpoints/distinct/#distinct-field-values-advanced","title":"Distinct Field Values - Advanced","text":"<p>This entrypoint finds the distinct values for a specified field across a target collection and returns the results in an array.</p> <ul> <li><code>POST /{base_url}/distinct/:field</code></li> </ul>"},{"location":"egose-acl/api-endpoints/distinct/#parameters_1","title":"Parameters","text":"Name Type In Description <code>field</code> string param The field for which to return distinct values <code>filter</code> string body Mongose <code>Filter</code> that specifies the match rules to retrieve the distinct values"},{"location":"egose-acl/api-endpoints/distinct/#example_1","title":"Example","text":""},{"location":"egose-acl/api-endpoints/distinct/#request_1","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X POST \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/distinct/name \\\n-d '{\n    \"filter\": {\n      \"name\": { \"$regex\": \"drew\", \"$options\": \"i\" }\n    }\n  }'\n</code></pre> <pre><code>const targetField = 'name';\nconst data = {\nfilter: {\nname: { $regex: 'drew', $options: 'i' },\n},\n};\nconst url = 'https://example.com/users/distinct/' + targetField;\nconst response = await fetch(url, {\nmethod: 'POST',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/distinct/#response_1","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>[\"Andrew\", \"Andrew-2nd\"]\n</code></pre>"},{"location":"egose-acl/api-endpoints/list/","title":"List","text":""},{"location":"egose-acl/api-endpoints/list/#list-resources","title":"List Resources","text":"<p>This entrypoint returns a set of resources.</p> <ul> <li><code>GET /{base_url}</code></li> </ul>"},{"location":"egose-acl/api-endpoints/list/#parameters","title":"Parameters","text":"Name Type In Description Default <code>limit</code> number query The maximum number of documents 1000 (max) <code>page</code> number query The page number of documents; starts from 1 1 <code>include_permissions</code> boolean query Whether to include document permissions true <code>include_count</code> boolean query Whether to include total results count false <code>lean</code> boolean query Whether to pass plain objects, not Mongoose Documents, in middleware false"},{"location":"egose-acl/api-endpoints/list/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/list/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users?limit=100&amp;page=5&amp;include_permissions=false&amp;include_count=false&amp;lean=true\n</code></pre> <pre><code>const params = {\nlimit: 100,\npage: 5,\ninclude_permissions: false,\ninclude_count: false,\nlean: true\n};\nconst url = 'https://example.com/users' + new URLSearchParams(params);\nconst response = await fetch(url, {\nmethod: 'GET',\nheaders: { 'Accept': 'application/json', 'Content-Type': 'application/json' },\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/list/#response","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>[\n{\n\"name\": \"Andrew Jackso\",\n\"address\": \"5d6ede6a0ba62570afcedd3a\",\n\"role\": \"user\",\n\"creditBalance\": 100,\n\"loginDate\": \"2022-02-22T02:02:22.679Z\"\n}\n]\n</code></pre>"},{"location":"egose-acl/api-endpoints/list/#list-resources-advanced","title":"List Resources - Advanced","text":"<p>This entrypoint returns a set of filtered resources that includes selective data fields.</p> <ul> <li><code>POST /{base_url}/__query</code></li> <li>The suffix <code>__query</code> can be configured using a model option, as demonstrated below:   <pre><code>modelRouter.set('queryPath', '_queryable_');\n</code></pre></li> </ul>"},{"location":"egose-acl/api-endpoints/list/#parameters_1","title":"Parameters","text":"Name Type In Description Default <code>filter</code> object body Mongoose <code>Filter</code> object <code>select</code> object | array&lt;string&gt; body Document fields to include or exclude <code>populate</code> array&lt;string&gt; | array&lt;object&gt; body Document fields to populate <code>sort</code> string | object body Document sort order <code>skip</code> number body The number of documents to skip; used over <code>page</code> if specified <code>limit</code> number body The maximum number of documents; used over <code>pageSize</code> if specified 1000 (max) <code>page</code> number body The page number of documents; starts from 1 1 <code>pageSize</code> number body The maximum number of documents 1 <code>options.includePermissions</code> boolean body Whether to include document permissions true <code>options.includeCount</code> boolean body Whether to include total results count false <code>options.populateAccess</code> 'list' | 'read' body The access level to use in <code>populate</code> method read <code>options.lean</code> boolean body Whether to pass plain objects, not Mongoose Documents, in middleware false"},{"location":"egose-acl/api-endpoints/list/#example_1","title":"Example","text":""},{"location":"egose-acl/api-endpoints/list/#request_1","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X POST \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/__query \\\n-d '{\n    \"filter\": { \"loginDate\": { \"$gte\": \"2022-02-22T02:02:22.679Z\" } },\n    \"select\": [\"name\", \"address\"],\n    \"populate\": [\"address\"],\n    \"sort\": { \"createdAt\": -1 },\n    \"limit\": 100,\n    \"page\": 5,\n    \"options\": {\n      \"includePermissions\": true,\n      \"includeCount\": true,\n      \"populateAccess\": \"list\",\n      \"lean\": true\n    }\n  }'\n</code></pre> <pre><code>const data = {\nfilter: { loginDate: { $gte: '2022-02-22T02:02:22.679Z' } },\nselect: ['name', 'address'],\npopulate: ['address'],\nsort: { createdAt: -1 },\nlimit: 100,\npage: 5,\noptions: {\nincludePermissions: true,\nincludeCount: true,\npopulateAccess: 'list',\nlean: true,\n},\n};\nconst url = 'https://example.com/users/__query';\nconst response = await fetch(url, {\nmethod: 'POST',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/list/#response_1","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>{\n\"count\": 2,\n\"rows\": [\n{\n\"_id\": \"5d6ede6a0ba62570afcedd3a\",\n\"name\": \"Mike\",\n\"address\": {\n\"city\": \"Seattle\",\n\"country\": \"USA\"\n},\n\"_permissions\": {\n\"edit\": true\n}\n},\n{\n\"_id\": \"5d6ede6a0ba62570afcedd3b\",\n\"name\": \"Jennifer\",\n\"address\": {\n\"city\": \"Vancouver\",\n\"country\": \"Canada\"\n},\n\"_permissions\": {\n\"edit\": false\n}\n}\n]\n}\n</code></pre>"},{"location":"egose-acl/api-endpoints/new/","title":"New","text":""},{"location":"egose-acl/api-endpoints/new/#new-resource","title":"New Resource","text":"<p>This entrypoint returns an empty resource and is used to retrieve sample data as a placeholder.</p> <ul> <li><code>GET /{base_url}/new</code></li> </ul>"},{"location":"egose-acl/api-endpoints/new/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/new/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X GET \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/new\n</code></pre> <pre><code>const url = 'https://example.com/users/new';\nconst response = await fetch(url, {\nmethod: 'GET',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/new/#response","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>{\n\"_id\": \"5d6ede6a0ba62570afcedd3b\",\n\"name\": null,\n\"address\": null,\n\"roles\": [\"user\"],\n\"creditBalance\": 0,\n\"loginDate\": null\n}\n</code></pre>"},{"location":"egose-acl/api-endpoints/read/","title":"Read","text":""},{"location":"egose-acl/api-endpoints/read/#read-resource","title":"Read Resource","text":"<p>This entrypoint returns a target resource.</p> <ul> <li><code>GET /{base_url}/:id</code></li> </ul>"},{"location":"egose-acl/api-endpoints/read/#parameters","title":"Parameters","text":"Name Type In Description Default <code>id</code> string param Resource identifier; <code>required</code> <code>include_permissions</code> boolean query Whether to include document permissions true <code>try_list</code> boolean query Whether to attempt to retrieve the resource if not allowed true <code>lean</code> boolean query Whether to pass plain objects, not Mongoose Documents, in middleware false"},{"location":"egose-acl/api-endpoints/read/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/read/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/5d6ede6a0ba62570afcedd3b?try_list=true&amp;include_permissions=false&amp;lean=true\n</code></pre> <pre><code>const targetId = '5d6ede6a0ba62570afcedd3b';\nconst params = {\ntry_list: true,\ninclude_permissions: false,\nlean: true,\n};\nconst url = 'https://example.com/users/' + targetId + new URLSearchParams(params);\nconst response = await fetch(url, {\nmethod: 'GET',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/read/#response","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>{\n\"_id\": \"5d6ede6a0ba62570afcedd3b\",\n\"name\": \"Andrew Jackso\",\n\"address\": \"5d6ede6a0ba62570afcedd3a\",\n\"roles\": [\"user\"],\n\"creditBalance\": 100,\n\"loginDate\": \"2022-02-22T02:02:22.679Z\"\n}\n</code></pre>"},{"location":"egose-acl/api-endpoints/read/#read-resource-advanced","title":"Read Resource - Advanced","text":"<p>This entrypoint returns a target resource that includes selective data fields.</p> <ul> <li><code>POST /{base_url}/__query/:id</code></li> <li>The suffix <code>__query</code> can be configured using a model option, as demonstrated below:   <pre><code>modelRouter.set('queryPath', '_queryable_');\n</code></pre></li> </ul>"},{"location":"egose-acl/api-endpoints/read/#parameters_1","title":"Parameters","text":"Name Type In Description Default <code>id</code> string param Resource identifier; <code>required</code> <code>select</code> object | array&lt;string&gt; body Document fields to include or exclude <code>populate</code> array&lt;string&gt; | array&lt;object&gt; body Document fields to populate <code>options.includePermissions</code> boolean body Whether to include document permissions true <code>options.tryList</code> boolean body Whether to attempt to retrieve the resource if not allowed true <code>options.populateAccess</code> 'list' | 'read' body The access level to use in <code>populate</code> method read <code>options.lean</code> boolean body Whether to pass plain objects, not Mongoose Documents, in middleware false"},{"location":"egose-acl/api-endpoints/read/#example_1","title":"Example","text":""},{"location":"egose-acl/api-endpoints/read/#request_1","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X POST \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/__query/5d6ede6a0ba62570afcedd3b \\\n-d '{\n    \"select\": [\"name\", \"address\"],\n    \"populate\": [\"address\"],\n    \"options\": {\n      \"includePermissions\": true,\n      \"tryList\": true,\n      \"populateAccess\": \"list\",\n      \"lean\": true\n    }\n  }'\n</code></pre> <pre><code>const targetId = '5d6ede6a0ba62570afcedd3b';\nconst data = {\nselect: ['name', 'address'],\npopulate: ['address'],\noptions: {\nincludePermissions: true,\ntryList: true,\npopulateAccess: 'list',\nlean: true,\n},\n};\nconst url = 'https://example.com/users/__query/' + targetId;\nconst response = await fetch(url, {\nmethod: 'POST',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/read/#response_1","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>{\n\"_id\": \"5d6ede6a0ba62570afcedd3b\",\n\"name\": \"Andrew Jackso\",\n\"address\": {\n\"city\": \"Seattle\",\n\"country\": \"USA\"\n},\n\"_permissions\": {\n\"edit\": false\n}\n}\n</code></pre>"},{"location":"egose-acl/api-endpoints/update/","title":"Update","text":""},{"location":"egose-acl/api-endpoints/update/#update-resource","title":"Update Resource","text":"<p>This entrypoint updates a target resource.</p> <ul> <li><code>PUT /{base_url}/:id</code></li> </ul>"},{"location":"egose-acl/api-endpoints/update/#parameters","title":"Parameters","text":"Name Type In Description Default <code>id</code> string param Resource identifier; <code>required</code> <code>returning_all</code> boolean query Whether to return entire document or partial document true"},{"location":"egose-acl/api-endpoints/update/#example","title":"Example","text":""},{"location":"egose-acl/api-endpoints/update/#request","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X PUT \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/5d6ede6a0ba62570afcedd3b?returning_all=false \\\n-d '{ \"name\": \"Andrew-2nd\" }'\n</code></pre> <pre><code>const targetId = '5d6ede6a0ba62570afcedd3b';\nconst params = {\nreturning_all: false,\n};\nconst url = 'https://example.com/users/' + targetId + new URLSearchParams(params);\nconst response = await fetch(url, {\nmethod: 'PUT',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/update/#response","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>{\n\"name\": \"Andrew-2nd\"\n}\n</code></pre>"},{"location":"egose-acl/api-endpoints/update/#update-resource-advanced","title":"Update Resource - Advanced","text":"<p>This entrypoint updates a target resource and returns selective data fields.</p> <ul> <li><code>PUT /{base_url}/__mutation/:id</code></li> </ul>"},{"location":"egose-acl/api-endpoints/update/#parameters_1","title":"Parameters","text":"Name Type In Description Default <code>id</code> string param Resource identifier; <code>required</code> <code>returning_all</code> boolean query Whether to return entire document or partial document; 2nd true <code>data</code> object body Document data to create <code>select</code> object | array&lt;string&gt; body Document fields to include or exclude after the update <code>populate</code> array&lt;string&gt; | array&lt;object&gt; body Document fields to populate after the update <code>options.returningAll</code> boolean body Whether to return entire document or partial document; 1st true <code>options.includePermissions</code> boolean body Whether to include document permissions true <code>options.populateAccess</code> 'list' | 'read' body The access level to use in <code>populate</code> method read"},{"location":"egose-acl/api-endpoints/update/#example_1","title":"Example","text":""},{"location":"egose-acl/api-endpoints/update/#request_1","title":"request","text":"cURLJavascript <pre><code>curl \\\n-X PUT \\\n-H \"Accept: application/json\" \\\nhttps://example.com/users/5d6ede6a0ba62570afcedd3b \\\n-d '{\n    \"data\": { \"name\": \"Andrew-2nd\" },\n    \"select\": [\"name\", \"address\"],\n    \"populate\": [\"address\"],\n    \"options\": {\n      \"includePermissions\": true,\n      \"populateAccess\": \"read\",\n    }\n  }'\n</code></pre> <pre><code>const targetId = '5d6ede6a0ba62570afcedd3b';\nconst data = {\ndata: { name: 'Andrew-2nd' },\nselect: ['name', 'address'],\npopulate: ['address'],\noptions: {\nincludePermissions: true,\npopulateAccess: 'read',\n},\n};\nconst url = 'https://example.com/users/__mutation/' + targetId;\nconst response = await fetch(url, {\nmethod: 'PUT',\nheaders: { Accept: 'application/json', 'Content-Type': 'application/json' },\nbody: JSON.stringify(data),\n});\nconst result = response.json();\n</code></pre>"},{"location":"egose-acl/api-endpoints/update/#response_1","title":"response","text":"<pre><code>Status: 200\n</code></pre> <pre><code>{\n\"_id\": \"5d6ede6a0ba62570afcedd3b\",\n\"name\": \"Andrew-2nd\",\n\"address\": {\n\"city\": \"Seattle\",\n\"country\": \"USA\"\n},\n\"_permissions\": {\n\"edit\": false\n}\n}\n</code></pre>"},{"location":"egose-acl/crud-lifecycle/","title":"Workflow Lifecycle","text":"<p>Each CRUD operation has its own workflow lifecycle that runs model permission functions and middleware functions.</p> <ul> <li>List</li> <li>Read</li> <li>Create</li> <li>Update</li> </ul>"},{"location":"egose-acl/crud-lifecycle/create/","title":"Create","text":"<p><code>Create</code> operation executes hook methods in the following sequence:</p> Hook Parameters Description <code>validate</code> <ol> <li>allowed data object</li> <li>global permissions</li> <li>context object:<ul><li>originalData</li></ul></li> </ol> <ul></ul> <code>prepare</code> <ol> <li>allowed data object</li> <li>global permissions</li> <li>context object:<ul><li>originalData</li></ul></li> </ol> <ul></ul> <code>docPermissions</code> <ol> <li>Mongoose document</li> <li>global permissions</li> <li>context object:<ul><li>originalData</li><li>preparedData</li></ul></li> </ol> <ul> <li>skips if option <code>includePermissions</code> set to <code>false</code></li> <li>called after a Mongoose document created</li> </ul> <code>decorate</code> <ol> <li>plain document object</li> <li>global permissions</li> <li>context object:<ul><li>originalData</li><li>preparedData</li></ul></li> </ol> <ul> </ul>"},{"location":"egose-acl/crud-lifecycle/create/#configuration-example","title":"Configuration Example","text":"<pre><code>modelRouter.validate('create', function (dataObject, globalPermissions) {\nconst hasName = !!dataObject.name;\nreturn hasName;\n});\nmodelRouter.prepare('create', function (dataObject, globalPermissions) {\ndataObject.name = dataObject.name.trim();\nreturn dataObject;\n});\nmodelRouter.docPermissions('create', function (doc, globalPermissions) {\nconst isMe = String(doc._id) === String(this.user._id);\nreturn {\n'edit.name': globalPermissions.isAdmin || isMe,\n'edit.role': globalPermissions.isAdmin,\n};\n});\nmodelRouter.decorate('create', function (docObject, globalPermissions) {\ndocObject.decoratedBy = 'egose';\nreturn docObject;\n});\n</code></pre>"},{"location":"egose-acl/crud-lifecycle/list/","title":"List","text":"<p><code>List</code> operation executes hook methods in the following sequence:</p> Hook Parameters Description <code>docPermissions</code> <ol> <li>Mongoose document / plain document object</li> <li>global permissions</li> </ol> <ul> <li>skips if option <code>includePermissions</code> set to <code>false</code></li> <li>called after Mongoose execute the query</li> <li>runs on each document</li> </ul> <code>decorate</code> <ol> <li>plain document object</li> <li>global permissions</li> </ol> <ul> <li>runs on each document object</li> </ul> <code>decorateAll</code> <ol> <li>plain document objects</li> <li>global permissions</li> </ol> <ul> <li>runs on set of document objects</li> </ul>"},{"location":"egose-acl/crud-lifecycle/list/#configuration-example","title":"Configuration Example","text":"<pre><code>modelRouter.docPermissions('list', function (docOrObject, globalPermissions) {\nconst isMe = String(docOrObject._id) === String(this.user._id);\nreturn {\ncanEdit: globalPermissions.isAdmin || isMe,\n};\n});\nmodelRouter.decorate('list', function (docObject, globalPermissions) {\ndocObject.decoratedBy = 'egose';\nreturn docObject;\n});\nmodelRouter.decorateAll(function (docObjects, globalPermissions) {\nconst filtered = docObjects.filter((doc) =&gt; doc.public);\nreturn filtered;\n});\n</code></pre>"},{"location":"egose-acl/crud-lifecycle/read/","title":"Read","text":"<p><code>Read</code> operation executes hook methods in the following sequence:</p> Hook Parameters Description <code>docPermissions</code> <ol> <li>Mongoose document / plain document object</li> <li>global permissions</li> </ol> <ul> <li>skips if option <code>includePermissions</code> set to <code>false</code></li> <li>called after Mongoose execute the query</li> </ul> <code>decorate</code> <ol> <li>plain document object</li> <li>global permissions</li> </ol> <ul> <li>runs on each document object</li> </ul>"},{"location":"egose-acl/crud-lifecycle/read/#configuration-example","title":"Configuration Example","text":"<pre><code>modelRouter.docPermissions('read', function (docOrObject, globalPermissions) {\nconst isMe = String(docOrObject._id) === String(this.user._id);\nreturn {\n'edit.name': globalPermissions.isAdmin || isMe,\n'edit.role': globalPermissions.isAdmin,\n};\n});\nmodelRouter.decorate('read', function (docObject, globalPermissions) {\ndocObject.timestamp = new Date();\nreturn docObject;\n});\n</code></pre>"},{"location":"egose-acl/crud-lifecycle/update/","title":"Update","text":""},{"location":"egose-acl/crud-lifecycle/update/#update","title":"Update","text":"<p><code>Update</code> operation executes hook methods in the following sequence:</p> Hook Parameters Description <code>docPermissions</code> <ol> <li>Mongoose document</li> <li>global permissions</li> </ol> <ul> <li>called after Mongoose execute the query</li> </ul> <code>validate</code> <ol> <li>allowed data object</li> <li>global permissions</li> <li>context object:<ul><li>originalDoc</li><li>originalData</li><li>currentDoc</li></ul></li> </ol> <ul></ul> <code>prepare</code> <ol> <li>allowed data object</li> <li>global permissions</li> <li>context object:<ul><li>originalDoc</li><li>originalData</li><li>currentDoc</li></ul></li> </ol> <ul></ul> <code>transform</code> <ol> <li>allowed data object</li> <li>global permissions</li> <li>context object:<ul><li>originalDoc</li><li>originalData</li><li>currentDoc</li><li>preparedData</li><li>modifiedPaths</li></ul></li> </ol> <ul><li>called before changes saved</li></ul> <code>docPermissions</code> <ol> <li>Mongoose document</li> <li>global permissions</li> <li>context object:<ul><li>originalDoc</li><li>originalData</li><li>currentDoc</li><li>preparedData</li><li>modifiedPaths</li></ul></li> </ol> <ul> <li>called after changes saved</li> </ul> <code>decorate</code> <ol> <li>plain document object</li> <li>global permissions</li> <li>context object:<ul><li>originalDoc</li><li>originalData</li><li>currentDoc</li><li>preparedData</li><li>modifiedPaths</li></ul></li> </ol> <ul> </ul>"},{"location":"egose-acl/crud-lifecycle/update/#configuration-example","title":"Configuration Example","text":"<pre><code>modelRouter.validate('update', function (dataObject, globalPermissions) {\nreturn true;\n});\nmodelRouter.prepare('update', function (dataObject, globalPermissions) {\ndataObject.name = dataObject.name.trim();\nreturn dataObject;\n});\nmodelRouter.transform(function (doc, globalPermissions) {\nreturn doc;\n});\nmodelRouter.docPermissions('update', function (doc, globalPermissions) {\nconst isMe = String(doc._id) === String(this.user._id);\nreturn {\n'edit.name': globalPermissions.isAdmin || isMe,\n'edit.role': globalPermissions.isAdmin,\n};\n});\nmodelRouter.decorate('update', function (docObject, globalPermissions) {\ndocObject.decoratedBy = 'egose';\nreturn docObject;\n});\n</code></pre>"},{"location":"egose-acl/options/","title":"Options","text":"<p>Each CRUD operation has its own workflow lifecycle that runs model permission functions and middleware functions.</p> <ul> <li>Global Options</li> <li>Model Options</li> <li>Model Middleware</li> </ul>"},{"location":"egose-acl/options/default-model-options/","title":"Default Model Router Options","text":""},{"location":"egose-acl/options/default-model-options/#options-for-default-model-routers","title":"Options for Default Model Routers","text":"<p>The default model router options are applied to a router when a specific option is not provided. In these cases, the default options are used.</p>"},{"location":"egose-acl/options/default-model-options/#permissionfield","title":"permissionField","text":"<p>The <code>permissionField</code> option specifies the name of the object field that is used to set the model permissions in the Mongoose document or document object. By default, it is set to <code>_permissions</code>.</p> <pre><code>import egose from '@egose/acl';\nconst permissionField = '__access';\negose.setDefaultModelOption('permissionField', permissionField);\n// or\negose.setDefaultModelOptions({ permissionField });\n</code></pre>"},{"location":"egose-acl/options/default-model-options/#idparam","title":"idParam","text":"<p>The <code>idParam</code> option is used to specify the <code>Express Route Parameter</code> that is used to capture the <code>Document ID</code> value. This option is only applicable when creating the model router and is set to <code>id</code> by default.</p> <pre><code>import egose from '@egose/acl';\nconst idParam = 'doc_id';\negose.setDefaultModelOption('idParam', idParam);\n// or\negose.setDefaultModelOptions({ idParam });\n</code></pre>"},{"location":"egose-acl/options/default-model-options/#identifier","title":"identifier","text":"<p>The option <code>identifier</code> defines how <code>id param</code> is used to find the target document, defaults to <code>_id</code> field; there is more than one way to define the relation:</p> <ul> <li><code>string</code>: Mongoose document field key</li> <li><code>function</code>: Function returns a Mongoose query to find the target document.</li> </ul> <pre><code>import egose from '@egose/acl';\nconst identifier = function (id) {\nreturn { $or: [{ _id: id }, { code: id }] };\n};\negose.setDefaultModelOption('identifier', identifier);\n// or\negose.setDefaultModelOptions({ identifier });\n</code></pre>"},{"location":"egose-acl/options/default-model-options/#parentpath","title":"parentPath","text":"<p>The <code>parentPath</code> option is a configuration setting that allows you to specify the path name between the <code>host</code> and the <code>basePath</code> for each model router. This option is used to build the full path for each router. If no other value is provided, it defaults to <code>''</code>.</p> <pre><code>import egose from '@egose/acl';\nconst parentPath = '/api';\negose.setDefaultModelOption('parentPath', parentPath);\n// or\negose.setDefaultModelOptions({ parentPath });\n</code></pre>"},{"location":"egose-acl/options/default-model-options/#querypath","title":"queryPath","text":"<p>The <code>queryPath</code> option is used to set the path name (suffix) for <code>Advanced View Routes</code>. If no other value is provided, it defaults to <code>__query</code>.</p> <pre><code>import egose from '@egose/acl';\nconst queryPath = '__q__';\negose.setDefaultModelOption('queryPath', queryPath);\n// or\negose.setDefaultModelOptions({ queryPath });\n</code></pre>"},{"location":"egose-acl/options/default-model-options/#mutationpath","title":"mutationPath","text":"<p>The <code>mutationPath</code> option is used to set the path name (suffix) for <code>Advanced Write Routes</code>. If no other value is provided, it defaults to <code>__mutation</code>.</p> <pre><code>import egose from '@egose/acl';\nconst mutationPath = '__m__';\negose.setDefaultModelOption('mutationPath', mutationPath);\n// or\negose.setDefaultModelOptions({ mutationPath });\n</code></pre>"},{"location":"egose-acl/options/default-model-options/#listhardlimit","title":"listHardLimit","text":"<p>The <code>listHardLimit</code> option specifies the maximum number of documents to return from a query. It is useful for limiting the amount of data that is retrieved from the database, which can improve performance and reduce the risk of overloading the server or client.</p> <pre><code>import egose from '@egose/acl';\nconst listHardLimit = 100;\negose.setDefaultModelOption('listHardLimit', listHardLimit);\n// or\negose.setDefaultModelOptions({ listHardLimit });\n</code></pre> <p>If the <code>listHardLimit</code> option is set to <code>100</code> and a request is made with a limit parameter that exceeds <code>100</code>, the number of returned documents will be capped at <code>100</code>.</p>"},{"location":"egose-acl/options/default-model-options/#routeguard","title":"routeGuard","text":"<p>The <code>routeGuard</code> option enables you to control access to the backend API endpoints based on the requester's global permissions. With this option, you can specify which routes are allowed and which ones are excluded, using the familiar CRUDL model (Create, Read, Update, Delete, and List).</p> <p>By using <code>routeGuard</code>, you can ensure that only authorized users can access and modify your data, helping to protect the confidentiality and integrity of your information.</p> <pre><code>import egose from '@egose/acl';\nconst listDef = true;\nconst readDef = ['isAdmin', 'isUser'];\nconst updateDef = 'isAdmin';\nconst createDef = function (globalPermissions) {\nif (globalPermissions.isAdmin) return true;\nreturn false;\n};\nconst deleteDef = false;\nconst routeGuard = {\nlist: listDef,\nread: readDef,\ncreate: createDef,\nupdate: updateDef,\ndelete: deleteDef,\n};\negose.setDefaultModelOption('routeGuard', routeGuard);\negose.setDefaultModelOption('routeGuard.list', listDef);\negose.setDefaultModelOption('routeGuard.read', readDef);\negose.setDefaultModelOption('routeGuard.create', createDef);\negose.setDefaultModelOption('routeGuard.update', updateDef);\negose.setDefaultModelOption('routeGuard.delete', deleteDef);\n// or\negose.setDefaultModelOptions({ routeGuard });\n</code></pre>"},{"location":"egose-acl/options/global-options/","title":"Global Options","text":""},{"location":"egose-acl/options/global-options/#global-options-for-library-and-model-routers","title":"Global Options for Library and Model Routers","text":"<p>Global options refer to the options that are set at the library-level.</p>"},{"location":"egose-acl/options/global-options/#globalpermissions","title":"globalPermissions","text":"<p>Global permissions are based on the requester's authentication/authorization context and determine the requester's access level for each request. Here's an example usage:</p> <pre><code>import egose from '@egose/acl';\negose.set('globalPermissions', function (req) {\nconst user = req.user;\nif (!user) return { isGuest: true };\nreturn {\nisGuest: false,\nisUser: true,\nisAdmin: user.role === 'admin',\n};\n});\n</code></pre> <p>In the above example, the <code>globalPermissions</code> option sets different access levels for users based on their authentication context. If a user is not authenticated, their access level is set to <code>isGuest</code>. If the user is authenticated, their access level is set to <code>isUser</code>, and if they have an 'admin' role, their access level is also set to <code>isAdmin</code>.</p>"},{"location":"egose-acl/options/global-options/#permissionfield","title":"permissionField","text":"<p>This option specifies the name of the object field that is used to set the global permissions in the <code>Request Object</code>. By default, it is set to <code>_permissions</code>.</p> <pre><code>import egose from '@egose/acl';\negose.set('permissionField', '__access');\n</code></pre>"},{"location":"egose-acl/options/model-middleware/","title":"Model Middleware","text":""},{"location":"egose-acl/options/model-middleware/#middleware-functions-for-model-routers","title":"Middleware functions for Model Routers","text":"<p>Middleware functions, also known as hooks, are functions that execute during the lifecycle of asynchronous data model CRUD operations. These functions have the capability to intercept and modify requests and responses as they move through the application, offering developers a powerful means of adding custom logic, such as validation and data transformation, without altering the core application logic.</p> <p>Middleware functions are also part of the model router's options and the way to define them is also the same.</p> <p>Please note that if you want to access the <code>Express Request Object</code> inside your middleware functions, you should use <code>regular functions</code> instead of <code>arrow functions</code>. Arrow functions do not have their own <code>this</code> value, so you cannot reference the <code>this</code> keyword to access the <code>Request Object</code>.</p>"},{"location":"egose-acl/options/model-middleware/#validate","title":"validate","text":"<p>The <code>validate</code> hooks enables you to apply custom logic to validate the data that comes from the requester before it is consumed by the further lifecycle middleware functions. With this option, you can define a set of rules or conditions that must be satisfied before the data is processed, helping to ensure the accuracy and integrity of your data.</p> <p>Using validate, you can perform a wide range of checks and validations, such as data type validation, format validation, and business rule validation.</p> <p>The <code>validate</code> hooks are available in both <code>create</code> and <code>update</code> operations and can be defined as individual hooks or as an object with separate functions for create and update.</p> <pre><code>import egose from '@egose/acl';\nconst create = function (dataObject, globalPermissions) {\nconst hasName = !!dataObject.name;\nreturn hasName;\n};\nconst update = function (dataObject, globalPermissions) {\nreturn true;\n};\nconst validate = {\ncreate,\nupdate,\n};\nconst userRouter = egose.createRouter('User', { validate });\n// or\nuserRouter.validate(validate);\n// or\nuserRouter.set('validate', validate);\n// or\nuserRouter.validate('create', create);\nuserRouter.validate('update', update);\n// or\nuserRouter.set('validate.create', create);\nuserRouter.set('validate.update', update);\n</code></pre>"},{"location":"egose-acl/options/model-middleware/#prepare","title":"prepare","text":"<p>The <code>prepare</code> hooks enables you to apply custom logic to modify the data that comes from the requester before it is merged into the current document. With this option, you can update or add additional data fields, manipulate the data format or structure, or perform other types of data transformation.</p> <p>Using <code>prepare</code>, you can perform a wide range of data processing and transformation tasks, such as data validation, data normalization, data enrichment, or data mapping. This feature can be especially useful in scenarios where you need to ensure the consistency and quality of your data.</p> <p>The <code>prepare</code> hooks are available in both <code>create</code> and <code>update</code> operations and can be defined as individual hooks or as an object with separate functions for create and update.</p> <pre><code>import egose from '@egose/acl';\nconst create = function (dataObject, globalPermissions) {\ndataObject.createdBy = this.user._id;\nreturn dataObject;\n};\nconst update = function (dataObject, globalPermissions) {\ndataObject.name = dataObject.name.trim();\nreturn dataObject;\n};\nconst prepare = {\ncreate,\nupdate,\n};\nconst userRouter = egose.createRouter('User', { prepare });\n// or\nuserRouter.prepare(prepare);\n// or\nuserRouter.set('prepare', prepare);\n// or\nuserRouter.prepare('create', create);\nuserRouter.prepare('update', update);\n// or\nuserRouter.set('prepare.create', create);\nuserRouter.set('prepare.update', update);\n</code></pre>"},{"location":"egose-acl/options/model-middleware/#transform","title":"transform","text":"<p>The <code>transform</code> hook allows you to apply process logic to modify the Mongoose document after the raw data has been merged into the current document. This hook is particularly useful for finalizing the updated document before the changes are saved in the database.</p> <p>The <code>transform</code> hook is only available for the update operation.</p> <pre><code>import egose from '@egose/acl';\nconst transform = function (doc, globalPermissions) {\ndoc.updateAuditFields(this.user);\nreturn doc;\n};\nconst userRouter = egose.createRouter('User', { transform });\n// or\nuserRouter.transform(transform);\n// or\nuserRouter.set('transform', transform);\n</code></pre>"},{"location":"egose-acl/options/model-middleware/#decorate","title":"decorate","text":"<p>The <code>decorate</code> hooks are invoked prior to sending the response data to the requester. They are utilized for processing raw data and applying custom logic before returning the result.</p> <p>The <code>decorate</code> hook are available in <code>list</code>, <code>read</code>, <code>create</code>, and <code>update</code> operations and can be defined as individual hooks or as an object with separate functions.</p> <pre><code>import egose from '@egose/acl';\nconst list = function (dataObject, globalPermissions) {\ndataObject._context = 'list';\nreturn dataObject;\n};\nconst read = function (dataObject, globalPermissions) {\ndataObject._context = 'read';\nreturn dataObject;\n};\nconst create = function (dataObject, globalPermissions) {\ndataObject._context = 'create';\nreturn dataObject;\n};\nconst update = function (dataObject, globalPermissions) {\ndataObject._context = 'update';\nreturn dataObject;\n};\nconst decorate = {\nlist,\nread,\ncreate,\nupdate,\n};\nconst userRouter = egose.createRouter('User', { decorate });\n// or\nuserRouter.decorate(decorate);\n// or\nuserRouter.set('decorate', decorate);\n// or\nuserRouter.decorate('list', list);\nuserRouter.decorate('read', read);\nuserRouter.decorate('create', create);\nuserRouter.decorate('update', update);\n// or\nuserRouter.set('decorate', decorate);\nuserRouter.set('decorate.list', list);\nuserRouter.set('decorate.read', read);\nuserRouter.set('decorate.create', create);\nuserRouter.set('decorate.update', update);\n</code></pre>"},{"location":"egose-acl/options/model-middleware/#decorateall","title":"decorateAll","text":"<p>The <code>decorateAll</code> hook is invoked prior to sending the response data in the <code>list</code> operation. It is used for processing and filtering multiple document objects before returning the result. It's important to note that the <code>decorateAll</code> hook runs after the <code>decorate</code> middleware has executed.</p> <p>The <code>decorateAll</code> hook is only available for the <code>update</code> operation.</p> <pre><code>import egose from '@egose/acl';\nconst decorateAll = function (docObjects, globalPermissions) {\nreturn omitInvalidDocs(docObjects);\n};\nconst userRouter = egose.createRouter('User', { decorateAll });\n// or\nuserRouter.decorateAll(decorateAll);\n// or\nuserRouter.set('decorateAll', decorateAll);\n</code></pre>"},{"location":"egose-acl/options/model-middleware/#availability-in-crud-operations","title":"Availability in CRUD Operations","text":"<p>Each middleware function is available in the following CRUD operations:</p> Middleware List Read Create Update Delete Validate \u2713 \u2713 Prepare \u2713 \u2713 Transform \u2713 Decorate \u2713 \u2713 \u2713 \u2713 Decorate All \u2713"},{"location":"egose-acl/options/model-options/","title":"Model Router Options","text":""},{"location":"egose-acl/options/model-options/#options-for-model-routers","title":"Options for Model Routers","text":"<p>Model router options refer to the specific options that are applied to an individual model router. These options can be provided either to the instance constructor or to individual setter methods.</p>"},{"location":"egose-acl/options/model-options/#basepath","title":"basePath","text":"<p>The <code>basePath</code> option sets the base URL path for the routes used by the Mongoose Model.</p> <p>It is only applicable when creating the model router and can be passed as an option object to the <code>createRouter()</code> method.</p> <pre><code>import egose from '@egose/acl';\nconst userRouter = egose.createRouter('User', { basePath: '/users' });\n</code></pre>"},{"location":"egose-acl/options/model-options/#parentpath","title":"parentPath","text":"<p>The <code>parentPath</code> option is a configuration setting that allows you to specify the path name between the <code>host</code> and the <code>basePath</code> for each model router. This option is used to build the full path for each router. This option is only applicable when creating a model router and will use the value from the <code>default model router options - parentPath</code> if it is not explicitly defined.</p> <pre><code>import egose from '@egose/acl';\nconst userRouter = egose.createRouter('User', { parentPath: '/api' });\n</code></pre>"},{"location":"egose-acl/options/model-options/#querypath","title":"queryPath","text":"<p>The <code>queryPath</code> option is used to specify the path name (suffix) for <code>Advanced View Routes</code>. This option is only applicable when creating a model router and will use the value from the <code>default model router options - queryPath</code> if it is not explicitly defined.</p> <pre><code>import egose from '@egose/acl';\nconst userRouter = egose.createRouter('User', { queryPath: '__q__' });\n</code></pre>"},{"location":"egose-acl/options/model-options/#mutationpath","title":"mutationPath","text":"<p>The <code>mutationPath</code> option is used to specify the path name (suffix) for <code>Advanced Write Routes</code>. This option is only applicable when creating a model router and will use the value from the <code>default model router options - mutationPath</code> if it is not explicitly defined.</p> <pre><code>import egose from '@egose/acl';\nconst userRouter = egose.createRouter('User', { mutationPath: '__m__' });\n</code></pre>"},{"location":"egose-acl/options/model-options/#idparam","title":"idParam","text":"<p>The <code>idParam</code> option is used to specify the <code>Express Route Parameter</code> that is used to capture the <code>Document ID</code> value. This option is only applicable when creating a model router and will use the value from the <code>default model router options - idParam</code> if it is not explicitly defined.</p> <pre><code>import egose from '@egose/acl';\nconst userRouter = egose.createRouter('User', { idParam: 'doc_id' });\n</code></pre>"},{"location":"egose-acl/options/model-options/#listhardlimit","title":"listHardLimit","text":"<p>The <code>listHardLimit</code> option specifies the maximum number of documents to return from a query. It is useful for limiting the amount of data that is retrieved from the database, which can improve performance and reduce the risk of overloading the server or client. It will use the value from the <code>default model router options - listHardLimit</code> if it is not explicitly defined.</p> <pre><code>import egose from '@egose/acl';\nconst userRouter = egose.createRouter('User', { listHardLimit: 100 });\n// or\nuserRouter.listHardLimit(100);\n// or\nuserRouter.set('listHardLimit', 100);\n</code></pre> <p>If the <code>listHardLimit</code> option is set to <code>100</code> and a request is made with a limit parameter that exceeds <code>100</code>, the number of returned documents will be capped at <code>100</code>.</p>"},{"location":"egose-acl/options/model-options/#permissionfield","title":"permissionField","text":"<p>The <code>permissionField</code> option specifies the name of the object field that is used to set the model permissions in the Mongoose document or document object. It will use the value from the <code>default model router options - permissionField</code> if it is not explicitly defined.</p> <pre><code>import egose from '@egose/acl';\nconst permissionField = '__access';\nconst userRouter = egose.createRouter('User', { permissionField });\n// or\nuserRouter.permissionField(permissionField);\n// or\nuserRouter.set('permissionField', permissionField);\n</code></pre>"},{"location":"egose-acl/options/model-options/#mandatoryfields","title":"mandatoryFields","text":"<p>With the <code>mandatoryFields</code> option, you can specify which model fields are essential for <code>docPermissions</code> middleware functions to operate correctly. After the middleware function, these fields are excluded and prevented from being returned to the requester, unless they are explicitly requested and authorized for viewing.</p> <pre><code>import egose from '@egose/acl';\nconst mandatoryFields = ['role'];\nconst userRouter = egose.createRouter('User', { mandatoryFields });\n// or\nuserRouter.mandatoryFields(mandatoryFields);\n// or\nuserRouter.set('mandatoryFields', mandatoryFields);\n</code></pre>"},{"location":"egose-acl/options/model-options/#identifier","title":"identifier","text":"<p>The option <code>identifier</code> defines how <code>id param</code> is used to find the target document and will use the value from the <code>default model router options - identifier</code> if it is not explicitly defined.</p> <p>There is more than one way to define the relation:</p> <ul> <li><code>string</code>: Mongoose document field key</li> <li><code>function</code>: Function returns a Mongoose query to find the target document.</li> </ul> <pre><code>import egose from '@egose/acl';\nconst identifier = function (id) {\nreturn { $or: [{ _id: id }, { code: id }] };\n};\nconst userRouter = egose.createRouter('User', { identifier });\n// or\nuserRouter.identifier(identifier);\n// or\nuserRouter.set('identifier', identifier);\n</code></pre>"},{"location":"egose-acl/options/model-options/#permissionschema","title":"permissionSchema","text":"<p>The <code>permissionSchema</code> option defines global and optional document permissions to resources, allowing for fine-grained control. If no field-level security rule is defined for a field, by default, the field is protected for all actions (list, read, update, and create).</p> <pre><code>import egose from '@egose/acl';\nconst permissionSchema = {\nname: { list: true, read: true, update: 'edit.name', create: true },\nrole: {\nlist: ['isAdmin', 'isUser'],\nread: 'isAdmin',\nupdate: function (globalPermissions, docPermissions) {\n// `this` refers to Express request object\nif (docPermissions['edit.role']) return true;\nreturn false;\n},\ncreate: 'isAdmin',\n},\n};\nconst userRouter = egose.createRouter('User', { permissionSchema });\n// or\nuserRouter.permissionSchema(permissionSchema);\n// or\nuserRouter.set('permissionSchema', permissionSchema);\n</code></pre>"},{"location":"egose-acl/options/model-options/#docpermissions","title":"docPermissions","text":"<p>The <code>docPermissions</code> option is a feature that enables you to define the permissions for a target document. With this option, you can prepare the permission object for the document, defining whether a requester is authorized to view or modify the document, as well as the level of access they have.</p> <pre><code>import egose from '@egose/acl';\nconst list = function (docOrObject, globalPermissions) {\nreturn {\n// processed document permissions\n};\n};\nconst read = function (docOrObject, globalPermissions) {\nreturn {\n// processed document permissions\n};\n};\nconst create = function (docOrObject, globalPermissions) {\nreturn {\n// processed document permissions\n};\n};\nconst update = function (docOrObject, globalPermissions) {\nreturn {\n// processed document permissions\n};\n};\nconst docPermissions = {\nlist,\nread,\ncreate,\nupdate,\n};\nconst userRouter = egose.createRouter('User', { docPermissions });\n// or\nuserRouter.docPermissions(docPermissions);\n// or\nuserRouter.set('docPermissions', docPermissions);\n// or\nuserRouter.docPermissions('list', list);\nuserRouter.docPermissions('read', read);\nuserRouter.docPermissions('create', create);\nuserRouter.docPermissions('update', update);\n// or\nuserRouter.set('docPermissions.list', list);\nuserRouter.set('docPermissions.read', read);\nuserRouter.set('docPermissions.create', create);\nuserRouter.set('docPermissions.update', update);\n</code></pre>"},{"location":"egose-acl/options/model-options/#routeguard","title":"routeGuard","text":"<p>The <code>routeGuard</code> option enables you to control access to the backend API endpoints based on the requester's global permissions. With this option, you can specify which routes are allowed and which ones are excluded, using the familiar CRUDL model (Create, Read, Update, Delete, and List).</p> <p>By using <code>routeGuard</code>, you can ensure that only authorized users can access and modify your data, helping to protect the confidentiality and integrity of your information.</p> <p>It will use the value from the <code>default model router options - routeGuard</code> if it is not explicitly defined.</p> <pre><code>import egose from '@egose/acl';\nconst listDef = true;\nconst readDef = ['isAdmin', 'isUser'];\nconst updateDef = 'isAdmin';\nconst createDef = function (globalPermissions) {\nif (globalPermissions.isAdmin) return true;\nreturn false;\n};\nconst deleteDef = false;\nconst routeGuard = {\nlist: listDef,\nread: readDef,\ncreate: createDef,\nupdate: updateDef,\ndelete: deleteDef,\n};\nconst userRouter = egose.createRouter('User', { routeGuard });\n// or\nuserRouter.routeGuard(routeGuard);\n// or\nuserRouter.set('routeGuard', routeGuard);\n// or\nuserRouter.routeGuard('list', listDef);\nuserRouter.routeGuard('read', readDef);\nuserRouter.routeGuard('create', createDef);\nuserRouter.routeGuard('update', updateDef);\nuserRouter.routeGuard('delete', deleteDef);\n// or\nuserRouter.set('routeGuard.list', listDef);\nuserRouter.set('routeGuard.read', readDef);\nuserRouter.set('routeGuard.create', createDef);\nuserRouter.set('routeGuard.update', updateDef);\nuserRouter.set('routeGuard.delete', deleteDef);\n</code></pre>"},{"location":"egose-acl/options/model-options/#basefilter","title":"baseFilter","text":"<p>The <code>baseFilter</code> option enables you to apply <code>document-level security</code> to control access to individual documents in a collection. With this option, you can define the permission guardrails for a given document, based on the requester's global permissions.</p> <p>Using <code>baseFilter</code> option, you can decorate the Mongoose Query object, applying custom filtering criteria to the query results to ensure that only authorized users can view or modify the documents.</p> <pre><code>import egose from '@egose/acl';\nconst listDef = function (globalPermissions) {\nreturn true;\n};\nconst readDef = function (globalPermissions) {\nif (globalPermissions.isAdmin) return {};\nelse return { $or: [{ _id: this.user._id }, { public: true }] };\n};\nconst updateDef = function (globalPermissions) {\nif (globalPermissions.isAdmin) return {};\nelse return { _id: this.user._id };\n};\nconst deleteDef = function (globalPermissions) {\nreturn globalPermissions.isAdmin;\n};\nconst baseFilter = {\nlist: listDef,\nread: readDef,\nupdate: updateDef,\ndelete: deleteDef,\n};\nconst userRouter = egose.createRouter('User', { baseFilter });\n// or\nuserRouter.baseFilter(baseFilter);\n// or\nuserRouter.set('baseFilter', baseFilter);\n// or\nuserRouter.baseFilter('list', listDef);\nuserRouter.baseFilter('read', readDef);\nuserRouter.baseFilter('update', updateDef);\nuserRouter.baseFilter('delete', deleteDef);\n// or\nuserRouter.set('baseFilter.list', listDef);\nuserRouter.set('baseFilter.read', readDef);\nuserRouter.set('baseFilter.update', updateDef);\nuserRouter.set('baseFilter.delete', deleteDef);\n</code></pre>"},{"location":"egose-acl/options/model-options/#defaults","title":"defaults","text":"<p>The <code>defaults</code> option allows you to define default options for each API endpoint, which will be used unless the requester provides their own options.</p> <pre><code>import egose from '@egose/acl';\nconst publicListArgs = {\nselect: ['name'],\npopulate: [],\nsort: '-createdAt',\nlimit: 1000,\npage: 1,\nprocess: [],\n};\nconst publicListOptions = {\nincludePermissions: true,\nincludeCount: false,\npopulateAccess: 'read',\nlean: false,\n};\nconst publicCreateArgs = {\nselect: ['name'],\npopulate: [],\nprocess: [],\n};\nconst publicCreateOptions = {\nincludePermissions: true,\npopulateAccess: 'read',\n};\nconst publicReadArgs = {\nselect: ['name'],\npopulate: [],\nprocess: [],\n};\nconst publicReadOptions = {\npopulateAccess: 'read',\nlean: false,\nincludePermissions: true,\ntryList: true,\n};\nconst publicUpdateArgs = {\nselect: ['name'],\npopulate: [],\nprocess: [],\n};\nconst publicUpdateOptions = {\nreturningAll: false,\nincludePermissions: true,\npopulateAccess: 'read',\n};\nconst defaults = {\npublicListArgs,\npublicListOptions,\npublicCreateArgs,\npublicCreateOptions,\npublicReadArgs,\npublicReadOptions,\npublicUpdateArgs,\npublicUpdateOptions,\n};\nconst userRouter = egose.createRouter('User', { defaults });\n// or\nuserRouter.defaults(defaults);\n// or\nuserRouter.set('defaults', defaults);\n// or\nuserRouter.defaults('publicListArgs', publicListArgs);\nuserRouter.defaults('publicListOptions', publicListOptions);\nuserRouter.defaults('publicCreateArgs', publicCreateArgs);\nuserRouter.defaults('publicCreateOptions', publicCreateOptions);\nuserRouter.defaults('publicReadArgs', publicReadArgs);\nuserRouter.defaults('publicReadOptions', publicReadOptions);\nuserRouter.defaults('publicUpdateArgs', publicUpdateArgs);\nuserRouter.defaults('publicUpdateOptions', publicUpdateOptions);\n// or\nuserRouter.set('defaults.publicListArgs', publicListArgs);\nuserRouter.set('defaults.publicListOptions', publicListOptions);\nuserRouter.set('defaults.publicCreateArgs', publicCreateArgs);\nuserRouter.set('defaults.publicCreateOptions', publicCreateOptions);\nuserRouter.set('defaults.publicReadArgs', publicReadArgs);\nuserRouter.set('defaults.publicReadOptions', publicReadOptions);\nuserRouter.set('defaults.publicUpdateArgs', publicUpdateArgs);\nuserRouter.set('defaults.publicUpdateOptions', publicUpdateOptions);\n</code></pre>"},{"location":"egose-deco/philosophy/","title":"Philosophy","text":"<p>The <code>@egose/deco</code> package offers <code>TypeScript Decorators</code> that allow developers to define <code>@egose/acl</code> configurations and options through class and method <code>annotations</code>. By leveraging these decorators, developers can significantly enhance the readability and maintainability of their backend codebase. Overall, @egose/deco provides a powerful way to streamline authorization logic and improve code organization.</p> <p> </p>"},{"location":"egose-deco/philosophy/#annotations","title":"Annotations","text":""},{"location":"egose-deco/philosophy/#class-decorators","title":"Class Decorators","text":"<ul> <li>Module</li> <li>Router</li> </ul>"},{"location":"egose-deco/philosophy/#method-decorators","title":"Method Decorators","text":"<ul> <li>GlobalPermissions</li> <li>DocPermissions</li> <li>BaseFilter</li> <li>Validate</li> <li>Prepare</li> <li>Transform</li> <li>Decorate</li> <li>DecorateAll</li> <li>RouteGuard</li> </ul>"},{"location":"egose-deco/philosophy/#parameter-decorators","title":"Parameter Decorators","text":"<ul> <li>Request</li> <li>Document</li> <li>Permissions</li> <li>Context</li> </ul>"},{"location":"egose-deco/philosophy/#property-decorators","title":"Property Decorators","text":"<ul> <li>Option</li> </ul>"},{"location":"egose-deco/quick-start/","title":"Quick Start","text":"<p>Before proceeding, make sure to install <code>express</code>, <code>mongoose</code> and <code>reflect-metadata</code> as peer dependencies. These packages are required for the proper functioning of the application and must be installed prior to running the code. You can install them using the npm package manager.</p>"},{"location":"egose-deco/quick-start/#installation","title":"Installation","text":"<pre><code>npm install express mongoose @egose/deco\nnpm install @types/express reflect-metadata --save-dev\n</code></pre> <pre><code>yarn add express mongoose @egose/deco\nyarn add @types/express reflect-metadata --dev\n</code></pre>"},{"location":"egose-deco/quick-start/#backend-configuration","title":"Backend Configuration","text":""},{"location":"egose-deco/quick-start/#model-router","title":"Model Router","text":"<p>Using the <code>Router</code> class decorator, you can define a model router class and specify various options and middleware functions with <code>annotations</code>. This approach helps to encapsulate and organize the routing logic for a given model, making the code more modular and easier to understand.</p> <p>For example:</p> <pre><code>import {\n// class decorator\nRouter,\n// method decorators\nDocPermissions,\nBaseFilter,\nValidate,\nPrepare,\nTransform,\nDecorate,\nDecorateAll,\nRouteGuard,\n// parameter decorators\nRequest,\nDocument,\nPermissions,\nContext,\n// property decorator\nOption,\n} from '@egose/deco';\n@Router('User')\nexport class UserRouter {\n@Option() routeGuard = {\nlist: true,\nread: true,\nupdate: true,\ndelete: 'isAdmin',\ncreate: ['isAdmin', 'dummy'],\nsubs: {\nstatusHistory: {\nlist: true,\nread: true,\nupdate: true,\ndelete: 'isAdmin',\ncreate: 'isAdmin',\n},\n},\n};\n@Option() permissionSchema = {\nname: {\nlist: true,\nread: true,\nupdate: ['edit.name', 'edit.dummy'],\ncreate: true,\n},\nrole: {\nlist: 'isAdmin',\nread: true,\nupdate: 'edit.role',\ncreate: 'isAdmin',\n},\npublic: {\nlist: false,\nread: true,\nupdate: 'edit.public',\ncreate: true,\n},\nstatusHistory: {\nlist: (permissions) =&gt; {\nreturn false;\n},\nread: (permissions) =&gt; {\nreturn permissions.isAdmin;\n},\nupdate: (permissions, modelPermissions) =&gt; {\nreturn modelPermissions['edit.statusHistory'];\n},\nsub: {\nname: { list: true, read: true, update: true, create: true },\napproved: { list: true, read: true, update: false, create: true },\ndocument: { list: false, read: true, update: true, create: true },\n},\n},\norgs: { list: true, read: true, update: 'edit.orgs', create: true },\n};\n@Option() basePath = null;\n@Option() identifier = (id) =&gt; {\nreturn { name: id };\n};\n@Option('baseFilter.subs') baseFilterSubs = {\nstatusHistory: {\nlist: (permissions) =&gt; {\nif (permissions.isAdmin) return {};\nelse return { approved: true };\n},\nread: (permissions) =&gt; {\nif (permissions.isAdmin) return {};\nelse return { approved: true };\n},\nupdate: (permissions) =&gt; {\nif (permissions.isAdmin) return {};\nelse return false;\n},\ndelete: (permissions) =&gt; {\nif (permissions.isAdmin) return {};\nelse return false;\n},\n},\n};\n@DocPermissions('default')\ndocPermissions(@Request() req, @Document() doc, @Permissions() permissions) {\nconst isMe = String(doc._id) === String(req._user?._id);\nconst p = {\n'edit.name': permissions.isAdmin || isMe,\n'edit.role': permissions.isAdmin,\n'edit.public': permissions.isAdmin,\n'edit.statusHistory': permissions.isAdmin,\n'edit.orgs': permissions.isAdmin,\n'test:public': doc.public,\n};\nreturn p;\n}\n@BaseFilter('list')\nlistBaseFilter(@Request() req, @Permissions() permissions) {\nif (permissions.isAdmin) return {};\nelse return { $or: [{ _id: req._user?._id }, { public: true }] };\n}\n@BaseFilter('read')\nreadBaseFilter(@Request() req, @Permissions() permissions) {\nif (permissions.isAdmin) return {};\nelse return { _id: req._user?._id };\n}\n@BaseFilter('update')\nupdateBaseFilter(@Request() req, @Permissions() permissions) {\nif (permissions.isAdmin) return {};\nelse return { _id: req._user?._id };\n}\n@BaseFilter('delete')\ndeleteBaseFilter(@Request() req, @Permissions() permissions) {\nif (permissions.isAdmin) return {};\nelse return { _id: req._user?._id };\n}\n@Decorate('create')\naddCreatedBy(@Document() doc) {\ndoc._createdBy = 'egose';\nreturn doc;\n}\n}\n</code></pre>"},{"location":"egose-deco/quick-start/#router-module","title":"Router Module","text":"<p>After defining one or more model routers, you can use the <code>Module</code> class decorator to create an Egose Module that includes these routers. Within the <code>Egose Module</code>, you can also define the <code>Global Permissions</code> function, which provides the user context to each model's middleware functions. This approach helps to organize the routers in a hierarchical structure, making the code more modular and easier to understand. By leveraging the Module decorator, developers can create a centralized location for defining global permissions and integrating them across all of the model routers in their application.</p> <p>For example:</p> <pre><code>import mongoose from 'mongoose';\nimport { RootRouter } from './root.router';\nimport { UserRouter } from './user.router';\nimport { OrgRouter } from './org.router';\nimport { Module, Option, GlobalPermissions, Request } from '@egose/deco';\n@Module({\nrouters: [RootRouter, UserRouter, OrgRouter],\noptions: { basePath: '/api' },\n})\nexport class RoutersModule {\n@Option() permissionField = '_permissions';\n@GlobalPermissions()\nasync globalPermissions(@Request() req) {\nconst User = mongoose.model('User');\nconst userName = req.headers.user;\nlet user;\nif (userName) {\nuser = await User.findOne({ name: userName });\n}\nreq._user = user;\nreturn { isAdmin: user?.role === 'admin' };\n}\n}\n</code></pre>"},{"location":"egose-deco/quick-start/#bootstrapping-the-module-in-an-express-server","title":"Bootstrapping the Module in an Express Server","text":"<p>Once you have defined the router module, you can bootstrap the API endpoints with the Express server. This involves encapsulating the Express routes within the module definition, which helps to ensure that the routing logic is properly organized and modularized. By leveraging the <code>bootstrap</code> function in the Egose library, developers can easily integrate their router modules with an Express server and start listening for incoming requests.</p> <p>For example:</p> <pre><code>import express from 'express';\nimport { EgoseFactory } from '@egose/deco';\nconst app = express();\nEgoseFactory.bootstrap(RoutersModule, app);\n</code></pre>"},{"location":"egose-swagger/philosophy/","title":"Philosophy","text":"<p>The <code>@egose/swagger</code> package provides support for the OpenAPI Specification (formerly known as Swagger Specification), which is a format used for describing REST APIs. It can be used to describe all the API endpoints that are generated by the <code>@egose/acl</code> model routers.</p> <p> </p>"},{"location":"egose-swagger/quick-start/","title":"Quick Start","text":"<p>Before proceeding, make sure to install <code>express</code>, <code>mongoose</code> and <code>@egose/acl</code> as peer dependencies. These packages are required for the proper functioning of the application and must be installed prior to running the code. You can install them using the npm package manager.</p>"},{"location":"egose-swagger/quick-start/#installation","title":"Installation","text":"<pre><code>npm install express mongoose @egose/acl\nnpm install @types/express --save-dev\n</code></pre> <pre><code>yarn add express mongoose @egose/acl\nyarn add @types/express --dev\n</code></pre>"},{"location":"egose-swagger/quick-start/#backend-configuration","title":"Backend Configuration","text":""},{"location":"egose-swagger/quick-start/#bootstrapping-the-swagger-routes-in-an-express-server","title":"Bootstrapping the Swagger routes in an Express Server","text":"<pre><code>import mongoose from 'mongoose';\nimport express from 'express';\nimport egose from '@egose/acl';\nimport { createOpenAPI } from '@egose/swagger';\nconst app = express();\nconst router = express.Router();\nconst UserSchema = new mongoose.Schema({\nname: { type: String },\n});\nmongoose.model('User', UserSchema);\nconst userRouter = egose.createRouter('User', { parentPath: '/api', basePath: '/users' });\nconst swagger = createOpenAPI([userRouter], { baseUrl: 'http://localhost:3000' });\nrouter.use('/', userRouter.routes);\nrouter.use('/api-docs', swagger.serve);\nrouter.get('/api-docs', swagger.setup);\napp.use('/api', router);\napp.listen(3000);\n</code></pre>"}]}