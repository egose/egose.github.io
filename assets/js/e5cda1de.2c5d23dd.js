"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1207],{7207:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var i=o(5893),n=o(1151);o(4866),o(5162),o(9286);const t={sidebar_position:0},l="Global Options",r={id:"egose-acl/options/global-options",title:"Global Options",description:"Global Options for Library and Model Routers",source:"@site/docs/egose-acl/options/global-options.mdx",sourceDirName:"egose-acl/options",slug:"/egose-acl/options/global-options",permalink:"/docs/egose-acl/options/global-options",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"aclSidebar",previous:{title:"Options",permalink:"/docs/egose-acl/options/"},next:{title:"Default Model Router Options",permalink:"/docs/egose-acl/options/default-model-options"}},a={},d=[{value:"Global Options for Library and Model Routers",id:"global-options-for-library-and-model-routers",level:2},{value:"globalPermissions",id:"globalpermissions",level:3},{value:"permissionField",id:"permissionfield",level:3}];function c(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"global-options",children:"Global Options"}),"\n","\n",(0,i.jsx)(s.h2,{id:"global-options-for-library-and-model-routers",children:"Global Options for Library and Model Routers"}),"\n",(0,i.jsx)(s.p,{children:"Global options refer to the options that are set at the library-level."}),"\n",(0,i.jsx)(s.h3,{id:"globalpermissions",children:"globalPermissions"}),"\n",(0,i.jsx)(s.p,{children:"Global permissions are based on the requester's authentication/authorization context and determine the requester's access level for each request. Here's an example usage:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"import egose from '@egose/acl';\n\negose.set('globalPermissions', function (req) {\n  const user = req.user;\n\n  if (!user) return { isGuest: true };\n\n  return {\n    isGuest: false,\n    isUser: true,\n    isAdmin: user.role === 'admin',\n  };\n});\n"})}),"\n",(0,i.jsxs)(s.p,{children:["In the above example, the ",(0,i.jsx)(s.code,{children:"globalPermissions"})," option sets different access levels for users based on their authentication context. If a user is not authenticated, their access level is set to ",(0,i.jsx)(s.code,{children:"isGuest"}),". If the user is authenticated, their access level is set to ",(0,i.jsx)(s.code,{children:"isUser"}),", and if they have an 'admin' role, their access level is also set to ",(0,i.jsx)(s.code,{children:"isAdmin"}),"."]}),"\n",(0,i.jsx)(s.h3,{id:"permissionfield",children:"permissionField"}),"\n",(0,i.jsxs)(s.p,{children:["This option specifies the name of the object field that is used to set the global permissions in the ",(0,i.jsx)(s.code,{children:"Request Object"}),". By default, it is set to ",(0,i.jsx)(s.code,{children:"_permissions"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"import egose from '@egose/acl';\n\negose.set('permissionField', '__access');\n"})})]})}function p(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);